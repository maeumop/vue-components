@charset "UTF-8";
/* @/components/Badge/_style.scss */

@use "sass:map";
@use "sass:meta";
@use "../styles" as _;

/// 컴포넌트 size 스타일 정의
/// @param {string} $modifier [default] - default|large
/// @output - .badge.size-#{modifier} { ... }
@mixin defineSizeStyle($modifier: default) {
  @if meta.type-of($modifier) != "string" {
    @error "$modifier 는 문자열 값이 와야합니다.";
  }

  // 기본 값
  $_x: -0.5rem;
  $_y: -0.5rem;

  @if $modifier == large {
    $_x: -0.8rem;
    $_y: -0.8rem;
  }

  .badge.size-#{$modifier} {
    &.right {
      right: $_x;
      top: $_y;
    }

    &.left {
      left: $_x;
      top: $_y;
    }

    &.bottom-right {
      right: $_x;
      bottom: $_y;
    }

    &.bottom-left {
      left: $_x;
      bottom: $_y;
    }

    @content;
  }
}
/// 컴포넌트 color 스타일 정의
/// @output - .badge.#{color-name} { ... }
@mixin defineColorStyle {
  @if meta.mixin-exists("mx-buttonColorStyle", _) {
    @include _.mx-buttonColorStyle using ($color-map) {
      &:not(&.disabled) {
        background-color: map.get($color-map, default);
        color: white;
      }
    }
  }
}

.badge-wrapper {
  position: relative;

  .badge {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.6rem;
    height: 1.6rem;
    font-weight: 600;
    text-align: center;
    overflow: hidden;

    @include defineColorStyle;
  }

  @include defineSizeStyle() {
    font-size: 0.6rem;
    line-height: normal;
    border-radius: 0.8rem;
  }

  @include defineSizeStyle(large) {
    width: 2.2rem;
    height: 2.2rem;
    border-radius: 1.1rem;
  }
}
