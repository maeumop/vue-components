@charset "UTF-8";
/* @/components/common.scss */
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use '../assets/styles/variables' as *;

//================================================================================
// 색상 팔레트
//================================================================================
$component-colors: (
  primary: $primary-color,
  secondary: $secondary-color,
  success: $success-color,
  warning: $warning-color,
  danger: $error-color,
  info: $info-color,
  light: $gray-100,
  dark: $gray-900,
);

//================================================================================
// 공통 믹스인
//================================================================================

/// 색상별 스타일 믹스인
/// @param {string} $color - 색상명
/// @param {string} $property - CSS 속성 (background-color, color, border-color 등)
@mixin color-variant($color, $property: 'background-color') {
  @if map.has-key($component-colors, $color) {
    #{$property}: map.get($component-colors, $color);
  } @else {
    @error "색상 '#{$color}'이 정의되지 않았습니다.";
  }
}

/// 호버 효과 믹스인
/// @param {string} $color - 기본 색상
/// @param {number} $darken-amount - 어둡게 할 정도 (기본값: 10%)
@mixin hover-effect($color, $darken-amount: 10%) {
  &:hover {
    background-color: color.adjust($color, $lightness: -$darken-amount);
  }
}

/// 그림자 믹스인
/// @param {string} $level - 그림자 레벨 (sm, base, md, lg, xl)
@mixin shadow($level: 'base') {
  @if $level == 'sm' {
    box-shadow: $shadow-sm;
  } @else if $level == 'base' {
    box-shadow: $shadow-base;
  } @else if $level == 'md' {
    box-shadow: $shadow-md;
  } @else if $level == 'lg' {
    box-shadow: $shadow-lg;
  } @else if $level == 'xl' {
    box-shadow: $shadow-xl;
  }
}

/// 전환 효과 믹스인
/// @param {string} $property - 전환할 속성 (기본값: all)
/// @param {string} $duration - 지속시간 (기본값: $transition-base)
@mixin transition($property: 'all', $duration: $transition-base) {
  transition: #{$property} #{$duration};
}

/// 반응형 믹스인
/// @param {string} $breakpoint - 브레이크포인트 (sm, md, lg, xl, 2xl)
@mixin responsive($breakpoint) {
  @if $breakpoint == 'sm' {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == 'md' {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == 'lg' {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == 'xl' {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  } @else if $breakpoint == '2xl' {
    @media (min-width: $breakpoint-2xl) {
      @content;
    }
  }
}

/// 플렉스 중앙 정렬 믹스인
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// 플렉스 중앙 정렬 (세로) 믹스인
@mixin flex-center-column {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

/// 절대 위치 중앙 정렬 믹스인
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// 텍스트 말줄임 믹스인
/// @param {number} $lines - 줄 수 (기본값: 1)
@mixin text-truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

//================================================================================
// 유틸리티 클래스
//================================================================================

// 색상 유틸리티
@each $name, $color in $component-colors {
  .text-#{$name} {
    color: $color;
  }

  .bg-#{$name} {
    background-color: $color;
  }

  .border-#{$name} {
    border-color: $color;
  }
}

// 간격 유틸리티
$spacings: (
  xs: $spacing-xs,
  sm: $spacing-sm,
  md: $spacing-md,
  lg: $spacing-lg,
  xl: $spacing-xl,
  2xl: $spacing-2xl,
  3xl: $spacing-3xl,
);

@each $name, $spacing in $spacings {
  .p-#{$name} {
    padding: $spacing;
  }
  .pt-#{$name} {
    padding-top: $spacing;
  }
  .pr-#{$name} {
    padding-right: $spacing;
  }
  .pb-#{$name} {
    padding-bottom: $spacing;
  }
  .pl-#{$name} {
    padding-left: $spacing;
  }
  .px-#{$name} {
    padding-left: $spacing;
    padding-right: $spacing;
  }
  .py-#{$name} {
    padding-top: $spacing;
    padding-bottom: $spacing;
  }

  .m-#{$name} {
    margin: $spacing;
  }
  .mt-#{$name} {
    margin-top: $spacing;
  }
  .mr-#{$name} {
    margin-right: $spacing;
  }
  .mb-#{$name} {
    margin-bottom: $spacing;
  }
  .ml-#{$name} {
    margin-left: $spacing;
  }
  .mx-#{$name} {
    margin-left: $spacing;
    margin-right: $spacing;
  }
  .my-#{$name} {
    margin-top: $spacing;
    margin-bottom: $spacing;
  }
}

// 플렉스 유틸리티
.flex {
  display: flex;
}
.flex-inline {
  display: inline-flex;
}
.flex-column {
  flex-direction: column;
}
.flex-row {
  flex-direction: row;
}
.flex-wrap {
  flex-wrap: wrap;
}
.flex-nowrap {
  flex-wrap: nowrap;
}
.flex-1 {
  flex: 1;
}
.flex-auto {
  flex: auto;
}
.flex-none {
  flex: none;
}

.justify-start {
  justify-content: flex-start;
}
.justify-end {
  justify-content: flex-end;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.justify-around {
  justify-content: space-around;
}

.items-start {
  align-items: flex-start;
}
.items-end {
  align-items: flex-end;
}
.items-center {
  align-items: center;
}
.items-baseline {
  align-items: baseline;
}
.items-stretch {
  align-items: stretch;
}

// 텍스트 유틸리티
.text-left {
  text-align: left;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}

.font-normal {
  font-weight: 400;
}
.font-medium {
  font-weight: 500;
}
.font-semibold {
  font-weight: 600;
}
.font-bold {
  font-weight: 700;
}

.text-xs {
  font-size: $font-size-xs;
}
.text-sm {
  font-size: $font-size-sm;
}
.text-base {
  font-size: $font-size-base;
}
.text-lg {
  font-size: $font-size-lg;
}
.text-xl {
  font-size: $font-size-xl;
}
.text-2xl {
  font-size: $font-size-2xl;
}
.text-3xl {
  font-size: $font-size-3xl;
}
.text-4xl {
  font-size: $font-size-4xl;
}

// 위치 유틸리티
.relative {
  position: relative;
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.sticky {
  position: sticky;
}

.top-0 {
  top: 0;
}
.right-0 {
  right: 0;
}
.bottom-0 {
  bottom: 0;
}
.left-0 {
  left: 0;
}

// 그림자 유틸리티
.shadow-sm {
  @include shadow('sm');
}
.shadow {
  @include shadow('base');
}
.shadow-md {
  @include shadow('md');
}
.shadow-lg {
  @include shadow('lg');
}
.shadow-xl {
  @include shadow('xl');
}

// 테두리 반경 유틸리티
.rounded-sm {
  border-radius: $border-radius-sm;
}
.rounded {
  border-radius: $border-radius-base;
}
.rounded-md {
  border-radius: $border-radius-md;
}
.rounded-lg {
  border-radius: $border-radius-lg;
}
.rounded-xl {
  border-radius: $border-radius-xl;
}
.rounded-full {
  border-radius: $border-radius-full;
}

// 기존 스타일 유지
.block {
  display: block !important;
}

.scrollbar {
  &::-webkit-scrollbar {
    width: 0.6rem;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $gray-400;
    border-radius: 0.3rem;
  }

  &::-webkit-scrollbar-track {
    background-color: $gray-100;
    border-radius: 0.3rem;
  }
}

//================================================================================
// 애니메이션
//================================================================================
@keyframes spinner {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes slideInUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideInDown {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.my-component {
  @include color-variant('primary', 'background-color');
  @include hover-effect($primary-color);
  @include shadow('md');
  @include transition('all', 0.3s ease);
  @include flex-center;

  @include responsive('md') {
    // 태블릿 이상에서만 적용
  }
}
