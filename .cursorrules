# Vue Components Library - Cursor Rules

## 프로젝트 개요
이 프로젝트는 Vue 3 + TypeScript로 개발된 컴포넌트 라이브러리입니다.

## 코딩 스타일 규칙

### 1. 언어 및 프레임워크
- Vue 3 Composition API 사용
- TypeScript 필수 사용
- SCSS/Sass 사용
- Vite 빌드 도구 사용

### 2. 파일 구조 규칙
- 컴포넌트는 `src/components/` 디렉토리에 위치
- 각 컴포넌트는 독립적인 폴더로 구성
- 컴포넌트 폴더 구조:
  ```
  ComponentName/
  ├── index.vue (메인 컴포넌트)
  ├── ex.vue (예제 페이지)
  ├── types.d.ts (타입 정의)
  ├── const.ts (상수, ENUM 정의)
  ├── style.scss (스타일)
  └── README.md (문서)
  ```

### 3. 네이밍 규칙
- 컴포넌트명: PascalCase (예: StyledButton, DatePicker)
- 파일명: camelCase (예: styledButton, datePicker)
- 변수/함수: camelCase
- 상수: camelCase
- CSS 클래스: kebab-case

### 4. Vue 컴포넌트 작성 규칙
- `<script setup lang="ts">` 사용
- Props는 TypeScript 인터페이스로 정의
- Emits는 defineEmits로 명시적 정의
- 한줄 if문 사용 금지 (사용자 규칙)

### 5. TypeScript 규칙
- 모든 props에 타입 정의 필수
- 함수 반환 타입 명시
- any 타입 사용 금지
- 인터페이스는 types.ts 파일에 정의

### 6. 스타일 규칙
- SCSS 사용
- BEM 방법론 권장
- scoped 스타일 사용
- 반응형 디자인 고려

### 7. 컴포넌트 설계 원칙
- 단일 책임 원칙 준수
- 재사용 가능한 컴포넌트 설계
- Props를 통한 설정 가능
- 이벤트를 통한 상호작용
- 접근성 고려

### 8. 문서화 규칙
- 각 컴포넌트에 README.md 작성
- Props, Events, Slots 문서화
- 사용 예제 포함
- 한글로 작성

### 9. 테스트 및 품질
- ESLint 규칙 준수
- TypeScript 엄격 모드 사용
- 컴포넌트 예제 페이지 제공
- 반응형 테스트

### 10. 특별 규칙
- 모든 응답은 한글로 작성
- 한줄 if문 사용 금지
- @ 별칭 사용 권장 (src 디렉토리)
- Icon 컴포넌트 사용 시 @iconify/vue 패키지 활용
- <script setup lang="ts"></script> 내에서 코드는 0번 라인부터 시작한다.
- switch case 문에서 case: {} 형태의 작성을 금지한다.
- vue 파일은 script, template, style 순으로 한다.
- vue 파일 컴포넌트 명은 style 테그 다음에 선언 한다.

## AI 어시스턴트 지침
- 위 규칙들을 엄격히 준수하여 코드 생성
- 한글로 설명 및 주석 작성
- TypeScript 타입 안전성 보장
- Vue 3 Composition API 패턴 사용
- 재사용 가능하고 확장 가능한 컴포넌트 설계
